# Use a base image for building tools and dependencise
FROM ubuntu:22.04 AS builder

# Any debian-based command will not prompt user-input
ENV DEBIAN_FRONTEND=noninteractive

# Install essentials tools
RUN apt-get update && \
    apt-get install -y \
    build-essential wget git \
    python3 gfortran default-jdk default-jre \
    libglu1-mesa-dev freeglut3-dev mesa-common-dev \ 
    openssl libssl-dev zlib1g-dev && \
    apt-get clean && \
    rm -rf /var/lib/apt/lists/*

# Symbolic link to python->python3
RUN ln -s /usr/bin/python3 /usr/bin/python

# Create new user
RUN useradd -ms /bin/bash luser

# ================================================================================
# CMAKE
# ================================================================================
# Setting CMake version CMake installation directory
ARG CMAKE_VERSION=3.29.0
ARG CMAKE_INSTALL_DIR=/cmake

# Download, extract, install
RUN wget https://github.com/Kitware/CMake/releases/download/v${CMAKE_VERSION}/cmake-${CMAKE_VERSION}.tar.gz && \
    tar -xzvf cmake-${CMAKE_VERSION}.tar.gz && \
    rm cmake-${CMAKE_VERSION}.tar.gz 

WORKDIR /cmake-${CMAKE_VERSION}
RUN ./bootstrap --prefix=${CMAKE_INSTALL_DIR} && \
    make -j6 && \
    make install

# Cleanup
WORKDIR / 
RUN rm -rf /cmake-${CMAKE_VERSION}

# Set the $PATH to cmake since it will be used in the following 
ENV PATH="/cmake/bin:${PATH}"

# ================================================================================
# OPENMPI
# ================================================================================
# Setting CMake version CMake installation directory
ARG OMPI_VERSION=5.0.2
ARG OMPI_INSTALL_DIR=/openmpi

# ================================================================================
# Download, extract, install
RUN wget https://download.open-mpi.org/release/open-mpi/v5.0/openmpi-${OMPI_VERSION}.tar.gz && \
    tar -xzvf openmpi-${OMPI_VERSION}.tar.gz && \
    rm openmpi-${OMPI_VERSION}.tar.gz

WORKDIR /openmpi-${OMPI_VERSION}
RUN ./configure --prefix=${OMPI_INSTALL_DIR} && \
    make -j6 all && \
    make install 

# Cleanup
WORKDIR / 
RUN rm -rf /openmpi-${OMPI_VERSION}

# Set the $PATH to openmpi since it will be used in the following 
ENV PATH="/openmpi:${PATH}"
ENV PATH="/openmpi/bin:${PATH}"

# ================================================================================
# VTK
# ================================================================================
# Setting CMake version CMake installation directory
ARG VTK_VERSION=9.3.0
ARG VTK_INSTALL_DIR=/vtk

# Download, extract, install
RUN wget https://www.vtk.org/files/release/9.3/VTK-${VTK_VERSION}.tar.gz && \
    tar -xzvf VTK-${VTK_VERSION}.tar.gz && \
    rm VTK-${VTK_VERSION}.tar.gz

WORKDIR /build-vtk
RUN cmake -DCMAKE_INSTALL_PREFIX=${VTK_INSTALL_DIR} \
    -DBUILD_TESTING=ON -DCMAKE_BUILD_TYPE=Release /VTK-${VTK_VERSION} && \
    cmake --build . --parallel 4 && \
    make install

# Cleanup
WORKDIR / 
RUN rm -rf /VTK-${VTK_VERSION} build-vtk

# ================================================================================
# BOOST
# ================================================================================
# Setting CMake version CMake installation directory
ARG BOOST_VERSION=1_84_0
ARG BOOST_INSTALL_DIR=/boost

# Download, extract, install
RUN wget https://boostorg.jfrog.io/artifactory/main/release/1.84.0/source/boost_${BOOST_VERSION}.tar.gz && \
    tar -xzvf boost_${BOOST_VERSION}.tar.gz && \
    rm boost_${BOOST_VERSION}.tar.gz

WORKDIR /boost_${BOOST_VERSION}
RUN ./bootstrap.sh --prefix=${BOOST_INSTALL_DIR} && \
    ./b2 install 

# Cleanup
WORKDIR / 
RUN rm -rf /boost_${BOOST_VERSION}

# ================================================================================
# LAPACK
# ================================================================================
# Setting lapack installation directory
ARG LAPACK_INSTALL_DIR=/tmp/lapack

# Download, extract, install
RUN git clone https://github.com/Reference-LAPACK/lapack.git
WORKDIR /build
RUN cmake -DCMAKE_INSTALL_LIBDIR=${LAPACK_INSTALL_DIR} ../lapack && \
    cmake --build . -j6 --target install

# Cleanup
WORKDIR / 
RUN rm -rf /build /lapack

# Set the $PATH to /lapack
ENV PATH="/lapack:${PATH}"

# ================================================================================
# BLAS
# ================================================================================
# Setting blas version and installation directory
ARG BLAS_VERSION=3.12.0
ARG BLAS_INSTALL_DIR=/blas

# Download, extract, install
RUN wget http://www.netlib.org/blas/blas-${BLAS_VERSION}.tgz && \
    tar -xvf blas-${BLAS_VERSION}.tgz && \
    rm blas-${BLAS_VERSION}.tgz

WORKDIR /build
RUN cmake -DCMAKE_INSTALL_PREFIX=${BLAS_INSTALL_DIR} ../BLAS-${BLAS_VERSION} && \
    make && \
    make install 

# Cleanup
WORKDIR /
RUN rm -rf /BLAS-${BLAS_VERSION} /build

# Set the $PATH to /blas
ENV PATH="/blas:${PATH}"

# ================================================================================
# HDF5
# ================================================================================
# Setting hdf5 installation directories
ARG HDF5_INSTALL_DIR=/hdf5

# Download, extract, install
WORKDIR /hdf5build

# setting luser permission to directories and changing user to luser
# this allows the HDF5 tests to run smoothly 
RUN chown -R luser:luser /hdf5build && \
    chown -R luser:luser /usr/lib/x86_64-linux-gnu/

RUN mkdir ${HDF5_INSTALL_DIR} && \
    chown -R luser:luser ${HDF5_INSTALL_DIR}

USER luser
RUN git clone https://github.com/HDFGroup/hdf5.git 

# Build HDF5
WORKDIR /hdf5build/build
RUN cmake -C /hdf5build/hdf5/config/cmake/cacheinit.cmake -G "Unix Makefiles" \
-DHDF5_ENABLE_PARALLEL:BOOL=ON \
-DALLOW_UNSUPPORTED:BOOL=ON \
-DCMAKE_BUILD_TYPE=Release \
-DCMAKE_INSTALL_PREFIX=${HDF5_INSTALL_DIR} /hdf5build/hdf5 && \
    cmake --build . && \
    ctest . -C --rerun-failed --output-on-failure && \
    make install

# Cleanup
USER root
WORKDIR /
RUN rm -rf /hdf5build

# ================================================================================
# HYPRE
# ================================================================================
# Setting hypre installation directory
ARG HYPRE_INSTALL_DIR=/hypre-install

# Download, extract, install
RUN git clone https://github.com/hypre-space/hypre.git

WORKDIR /hypre/src/
RUN ./configure --prefix=${HYPRE_INSTALL_DIR} && \
    make install 

# Cleanup
WORKDIR /
RUN rm -rf /hypre

# ================================================================================
# TRILINOS
# ================================================================================
# Setting hypre installation directory
ARG TRILINOS_INSTALL_DIR=/trilinos

# Download, extract, install
RUN git clone https://github.com/trilinos/Trilinos.git
WORKDIR /Trilinos/build

# Build trilinos
#-DTPL_ENABLE_MUMPS=ON \
RUN cmake \
-DCMAKE_INSTALL_PREFIX=${TRILINOS_INSTALL_DIR} \
-DTPL_ENABLE_MPI=ON \
-DTPL_ENABLE_Boost=ON \
-DBoost_LIBRARY_DIRS=/boost/lib \
-DBoost_INCLUDE_DIRS=/boost/include \
-DTPL_ENABLE_BLAS=ON \
-DBLAS_LIBRARY_DIRS=/blas/lib \
-DTPL_ENABLE_HDF5=ON \
-DHDF5_LIBRARY_DIRS=/hdf5/lib \
-DHDF5_INCLUDE_DIRS=/hdf5/include \ 
-DTPL_ENABLE_HYPRE=ON \
-DHYPRE_LIBRARY_DIRS=/hypre/lib \
-DHYPRE_INCLUDE_DIRS=/hypre/include \
-DTPL_ENABLE_LAPACK=ON \
-DLAPACK_LIBRARY_DIRS=/lapack \
-DCMAKE_C_COMPILER=/openmpi/bin/mpicc \
-DCMAKE_CXX_COMPILER=/openmpi/bin/mpicxx \
-DCMAKE_Fortran_COMPILER=/openmpi/bin/mpif90 \
-DTrilinos_ENABLE_Epetra=ON \
-DTrilinos_ENABLE_AztecOO=ON \
-DTrilinos_ENABLE_Ifpack=ON \
-DTrilinos_ENABLE_EpetraEXT=ON \
-DTrilinos_ENABLE_Amesos=ON \
-DTrilinos_ENABLE_ML=ON \
-DTrilinos_ENABLE_MueLU=ON \
-DTrilinos_ENABLE_ROL=ON \
-DTrilinos_ENABLE_Sacado=ON \
-DTrilinos_ENABLE_Teuchos=ON \
-DTrilinos_ENABLE_Zoltan=ON \
/Trilinos && \
make -j6 install

# Cleanup
WORKDIR /
RUN rm -rf Trilinos

# ================================================================================
# PETSC
# ================================================================================
# Setting petsc installation directory
ARG PETSC_INSTALL_DIR=/petsc-install

# Download and install
RUN git clone -b release https://gitlab.com/petsc/petsc.git 

# Set permission for luser
RUN chown -R luser:luser /petsc

RUN mkdir ${PETSC_INSTALL_DIR} && \
    chown -R luser:luser ${PETSC_INSTALL_DIR}

# Switch user (petsc should be installed by non-root)
USER luser

WORKDIR /petsc

# Install petsc library in $PETSC_INSTALL_DIR 
# mpi compilers must be in the $PATH
# Libraries path must be set explicitly
RUN ./configure --prefix=$PETSC_INSTALL_DIR \
--with-debugging=0 \
--download-suitesparse \
--download-mumps \
--download-superlu \
--download-superlu_dist \
--download-ml \
--download-eigen \
--download-hypre \
--download-scalapack \
--download-metis \
--download-parmetis \
--download-openmpi \
COPTFLAGS='-g -O' \
FOPTFLAGS='-g -O' \
CXXOPTFLAGS='-g -O' \
--with-lapack-lib=/lapack/liblapack.a \
--with-blas-lib=/blas/lib/libblas.a && \
make PETSC_DIR=/petsc PETSC_ARCH=arch-linux-c-opt all && \
make PETSC_DIR=/petsc PETSC_ARCH=arch-linux-c-opt install && \
make PETSC_DIR=$PETSC_INSTALL_DIR PETSC_ARCH="" check

# Cleanup
USER root
WORKDIR /
RUN rm -rf /petsc

# ================================================================================
# FINAL IMAGE
# ================================================================================
# Use a base image for building tools and dependencise
FROM ubuntu:22.04 AS final

# Copy cmake binary from buildcmake and set ENV
COPY --from=buildcmake /cmake /cmake
COPY --from=buildompi /openmpi /openmpi
COPY --from=buildvtk /vtk /vtk
COPY --from=buildboost /boost /boost
COPY --from=buildhdf5 /hdf5 /hdf5
COPY --from=buildblas /blas /blas
COPY --from=buildlapack /tmp/lapack /lapack
COPY --from=buildhypre /hypre-install /hypre/
COPY --from=buildtrilinos /trilinos /trilinos
COPY --from=buildpetsc /petsc-install /petsc