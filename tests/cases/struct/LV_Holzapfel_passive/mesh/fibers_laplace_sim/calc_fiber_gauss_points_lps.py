'''Read volumetric mesh file (vtu) generated by SimVascular
   and add fiber direction at the Gauss points using keyword
   FIB_DIR '''
import numpy as np
import vtk
from vtkmodules.util import numpy_support as vtknp
import pyvista as pv

def get_shape_function(p_elem):
    if p_elem.shape[0] == 4:
        s = (5 + 3 * np.sqrt(5)) / 20
        t = (5 - np.sqrt(5)) / 20
        xi = np.array([[s, t, t],
                       [t, s, t],
                       [t, t, s],
                       [t, t, t]])

        N = np.array([xi[:, 0],
                      xi[:, 1],
                      xi[:, 2],
                      (1 - xi[:, 0] - xi[:, 1] - xi[:, 2])]).T

    elif p_elem.shape[0] == 10:
        s1 = 0.25
        s2 = 1.0/3.0
        t2 = 0.0
        s3 = 10.0/11.0
        t3 = 8.0/11.0
        s4 = 0.066550153573664
        t4 = 0.433449846426336

        xi = np.array([
            [s1, s1, s1],
            [t2, s2, s2],
            [s2, t2, s2],
            [s2, s2, t2],
            [s2, s2, s2],
            [t3, s3, s3],
            [s3, t3, s3],
            [s3, s3, t3],
            [s3, s3, s3],
            [s4, s4, t4],
            [s4, t4, s4],
            [s4, t4, t4],
            [t4, t4, s4],
            [t4, s4, t4],
            [t4, s4, s4],
        ])

        s = 1 - xi[:, 0] - xi[:, 1] - xi[:, 2]
        N = np.array([
            xi[:, 0] * (2 * xi[:, 0] - 1),
            xi[:, 1] * (2 * xi[:, 1] - 1),
            xi[:, 2] * (2 * xi[:, 2] - 1),
            s * (2 * s - 1),
            4 * xi[:, 0] * xi[:, 1],
            4 * xi[:, 1] * xi[:, 2],
            4 * xi[:, 2] * xi[:, 0],
            4 * s * xi[:, 0],
            4 * s * xi[:, 1],
            4 * s * xi[:, 2]
        ]).T

    elif p_elem.shape[0] == 8:
        s = 1 / np.sqrt(3)
        t = -1 / np.sqrt(3)
        xi = np.array([[t, t, t],
                       [s, t, t],
                       [s, s, t],
                       [t, s, t],
                       [t, t, s],
                       [s, t, s],
                       [s, s, s],
                       [t, s, s]])

        lx = 1 - xi[:, 0]
        ly = 1 - xi[:, 1]
        lz = 1 - xi[:, 2]
        ux = 1 + xi[:, 0]
        uy = 1 + xi[:, 1]
        uz = 1 + xi[:, 2]

        N = np.array([
            lx * ly * lz / 8,
            ux * ly * lz / 8,
            ux * uy * lz / 8,
            lx * uy * lz / 8,
            lx * ly * uz / 8,
            ux * ly * uz / 8,
            ux * uy * uz / 8,
            lx * uy * uz / 8
        ]).T

    elif p_elem.shape[0] == 20:
        s = np.sqrt(0.6)
        t = 0.0

        xi = np.array([
            [-s, -s, -s],
            [ s, -s, -s],
            [ s,  s, -s],
            [-s,  s, -s],
            [-s, -s,  s],
            [ s, -s,  s],
            [ s,  s,  s],
            [-s,  s,  s],
            [ t, -s, -s],
            [ s,  t, -s],
            [ t,  s, -s],
            [-s,  t, -s],
            [ t, -s,  s],
            [ s,  t,  s],
            [ t,  s,  s],
            [-s,  t,  s],
            [-s, -s,  t],
            [ s, -s,  t],
            [ s,  s,  t],
            [-s,  s,  t],
            [-s,  t,  t],
            [ s,  t,  t],
            [ t, -s,  t],
            [ t,  s,  t],
            [ t,  t, -s],
            [ t,  t,  s],
            [ t,  t,  t]
        ])

        lx = 1 - xi[:, 0]
        ly = 1 - xi[:, 1]
        lz = 1 - xi[:, 2]
        ux = 1 + xi[:, 0]
        uy = 1 + xi[:, 1]
        uz = 1 + xi[:, 2]
        mx = lx*ux
        my = ly*uy
        mz = lz*uz

        N = np.array([
            lx*ly*lz*(lx+ly+lz-5)/8,
            ux*ly*lz*(ux+ly+lz-5)/8,
            ux*uy*lz*(ux+uy+lz-5)/8,
            lx*uy*lz*(lx+uy+lz-5)/8,
            lx*ly*uz*(lx+ly+uz-5)/8,
            ux*ly*uz*(ux+ly+uz-5)/8,
            ux*uy*uz*(ux+uy+uz-5)/8,
            lx*uy*uz*(lx+uy+uz-5)/8,
            mx*ly*lz/4,
            ux*my*lz/4,
            mx*uy*lz/4,
            lx*my*lz/4,
            mx*ly*uz/4,
            ux*my*uz/4,
            mx*uy*uz/4,
            lx*my*uz/4,
            lx*ly*mz/4,
            ux*ly*mz/4,
            ux*uy*mz/4,
            lx*uy*mz/4
        ]).T

    elif p_elem.shape[0] == 27:
        s = np.sqrt(0.6)
        t = 0.0

        xi = np.array([
            [-s, -s, -s],
            [ s, -s, -s],
            [ s,  s, -s],
            [-s,  s, -s],
            [-s, -s,  s],
            [ s, -s,  s],
            [ s,  s,  s],
            [-s,  s,  s],
            [ t, -s, -s],
            [ s,  t, -s],
            [ t,  s, -s],
            [-s,  t, -s],
            [ t, -s,  s],
            [ s,  t,  s],
            [ t,  s,  s],
            [-s,  t,  s],
            [-s, -s,  t],
            [ s, -s,  t],
            [ s,  s,  t],
            [-s,  s,  t],
            [-s,  t,  t],
            [ s,  t,  t],
            [ t, -s,  t],
            [ t,  s,  t],
            [ t,  t, -s],
            [ t,  t,  s],
            [ t,  t,  t]
        ])

        lx = 1 - xi[:, 0]
        ly = 1 - xi[:, 1]
        lz = 1 - xi[:, 2]
        ux = 1 + xi[:, 0]
        uy = 1 + xi[:, 1]
        uz = 1 + xi[:, 2]
        mx = xi[:, 0]
        my = xi[:, 1]
        mz = xi[:, 2]

        N = np.array([
           -mx*lx*my*ly*mz*lz/8,
            mx*ux*my*ly*mz*lz/8,
           -mx*ux*my*uy*mz*lz/8,
            mx*lx*my*uy*mz*lz/8,
            mx*lx*my*ly*mz*uz/8,
           -mx*ux*my*ly*mz*uz/8,
            mx*ux*my*uy*mz*uz/8,
           -mx*lx*my*uy*mz*uz/8,
            lx*ux*my*ly*mz*lz/4,
           -mx*ux*ly*uy*mz*lz/4,
           -lx*ux*my*uy*mz*lz/4,
            mx*lx*ly*uy*mz*lz/4,
           -lx*ux*my*ly*mz*uz/4,
            mx*ux*ly*uy*mz*uz/4,
            lx*ux*my*uy*mz*uz/4,
           -mx*lx*ly*uy*mz*uz/4,
            mx*lx*my*ly*lz*uz/4,
           -mx*ux*my*ly*lz*uz/4,
            mx*ux*my*uy*lz*uz/4,
           -mx*lx*my*uy*lz*uz/4,
           -mx*lx*ly*uy*lz*uz/2,
            mx*ux*ly*uy*lz*uz/2,
           -lx*ux*my*ly*lz*uz/2,
            lx*ux*my*uy*lz*uz/2,
           -lx*ux*ly*uy*mz*lz/2,
            lx*ux*ly*uy*mz*uz/2,
            lx*ux*ly*uy*lz*uz
        ]).T

    return N

def get_gauss_points(N, p_elem):
    gp = np.dot(N, p_elem)
    return gp

# Define the folder containing mesh
fd_name = "../"
fname = fd_name + "mesh-complete.mesh.vtu"
fd_out = fd_name

reader = vtk.vtkXMLUnstructuredGridReader()
reader.SetFileName(fname)
reader.Update()
output = reader.GetOutput()

# number of points
NoP = output.GetNumberOfPoints()

# number of cells
NoC = output.GetNumberOfCells()

# coordinates of points
points_vtk_array = output.GetPoints().GetData()
points = vtknp.vtk_to_numpy(points_vtk_array)
conn = [ ]

# cell connectivity
for i in range(NoC):
    cell = output.GetCell(i)
    npts = cell.GetNumberOfPoints()
    connt = [cell.GetPointId(j) for j in range(npts)]
    conn.append(connt)
conn = np.asarray(conn)

eNoN = len(conn[-1,:])

if eNoN == 4:
    ngp = 4
elif eNoN == 10:
    ngp = 15
elif eNoN == 8:
    ngp = 8
elif eNoN == 20:
    ngp = 27
elif eNoN == 27:
    ngp = 27
else:
    raise("Does not support element other than TET4 and TET10 and HEX8 ")

# calculate the polar coordinate of each point
lps_rsult = pv.read('lps_thickness/result_020.vtu')
t = lps_rsult.get_array('PHI_THK')

gpt_array = np.zeros((ngp * NoC, 11))
tg = np.zeros(ngp * NoC)

for i in range(NoC):
    p_elem = points[conn[i, :], :]
    t_elem = t[conn[i, :]]
    if i == 0:
        N = get_shape_function(p_elem)
    gp  = get_gauss_points(N, p_elem)
    tgl = get_gauss_points(N, t_elem)

    for j in range(ngp):
        gpt_array[i * ngp + j, 0] = i + 1
        gpt_array[i * ngp + j, 1] = j + 1
        gpt_array[i * ngp + j, 2:5] = gp[j, :]
        tg[i*ngp + j] = tgl[j]

# parameters
rsi = 0.025
rli = 0.09
rso = 0.035
rlo = 0.097

u = np.array([])
v = np.array([])

dxdu = np.zeros((gpt_array.shape[0],3))
dxdv = np.zeros((gpt_array.shape[0],3))
temp = np.zeros(3)

f = np.zeros((gpt_array.shape[0],3))
n = np.zeros((gpt_array.shape[0],3))
s = np.zeros((gpt_array.shape[0],3))

for i in range(gpt_array.shape[0]):
    x, y, z = gpt_array[i, 2], gpt_array[i, 3], gpt_array[i, 4]
    tt = tg[i]
    rl = (rli + (rlo - rli) * tt)
    rs = (rsi + (rso - rsi) * tt)
    at = np.sqrt(y*y + z*z) / rs
    bt = x / rl
    ut = np.arctan2(at, bt)
    vt = 0.0 if ut < 1e-7 else np.pi - np.arctan2(z, -y)

    u = np.append(u, ut)
    v = np.append(v, vt)

    temp[1] = rs*np.cos(u[i])*np.cos(v[i])
    temp[2] = rs*np.cos(u[i])*np.sin(v[i])
    temp[0] = -rl*np.sin(u[i])
    dxdu[i,:] = temp/np.linalg.norm(temp)

    temp[1] = -rs*np.sin(u[i])*np.sin(v[i])
    temp[2] =  rs*np.sin(u[i])*np.cos(v[i])
    temp[0] =  0.0
    dxdv[i,:] = temp/np.linalg.norm(temp)

    alpha =  np.pi*(-1.0/3 + 2.0/3*tg[i])
    f[i,:] = dxdu[i,:]*np.sin(alpha) + dxdv[i,:]*np.cos(alpha)
    n[i, :] = np.cross(dxdu[i, :], dxdv[i, :])
    s[i,:] = np.cross(f[i,:], n[i,:])

    gpt_array[i, 5:8] = f[i,:]
    gpt_array[i, 8:] = s[i,:]

    if i%1000 == 0:
        print('Finished ' + str("{:.3f}".format(i/gpt_array.shape[0]*100)) + '%')

np.savetxt(fd_out + "fibers_gauss_points.dat", gpt_array, \
    fmt='%d  %d  %f  %f  %f  %f  %f  %f  %f  %f  %f', \
    header='elem  gauss_pt  gauss_pt_x  gauss_pt_y  gauss_pt_z  fiber_x  fiber_y  fiber_z  sheet_x  sheet_y  sheet_z', delimiter=' ')


