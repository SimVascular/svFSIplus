'''Read volumetric mesh file (vtu) generated by SimVascular
   and add fiber direction at the centroid using keyword
   FIB_DIR '''
import numpy as np
import vtk
import os
from vtkmodules.util import numpy_support as vtknp
import pyvista as pv

# user-defined parameter
fd_name = "../" # The folder to contain the mesh files
fname = fd_name + "mesh-complete.mesh.vtu" # Name of the mesh vtu file
svFSI_exec_path = "/Users/aaronbrown/Documents/GitHub/svFSI_aabrown100-git/build/svFSI-build/bin/svFSI"

# parameters
rsi = 0.025 # short endo
rli = 0.09 # long endo
rso = 0.035 # short epi
rlo = 0.097 # long epi

# read mesh-complete.vtu
reader = vtk.vtkXMLUnstructuredGridReader()
reader.SetFileName(fname)
reader.Update()
output = reader.GetOutput()

# number of points
NoP = output.GetNumberOfPoints()
# number of cells
NoC = output.GetNumberOfCells()
# coordinates of points
temp_vtk_array = output.GetPoints().GetData()
coord = vtknp.vtk_to_numpy(temp_vtk_array)

conn_vtk = output.GetCells().GetData()
conn = vtknp.vtk_to_numpy(conn_vtk)
eNoN = conn[0]
conn = conn.reshape(NoC,eNoN+1)
conn = conn[:,1:]

# Solve Laplace (Heat) equation to get transmural/thickness direction

# in_name = "svFSI.inp"
# out_name = os.path.join(fd_name, in_name)
# with open(in_name, 'r') as svFile:
#     svRead = svFile.readlines()
# for item in range(len(svRead)):
#     # if "Constitutive model" in svRead[item]:
#     if "Mesh file path: ./mesh-complete.vtu" in svRead[item]:
#         svRead[item] = "   Mesh file path: " + fname + "\n"
#     if "Face file path: ./top.vtp" in svRead[item]:
#         svRead[item] = "      Face file path: " + fd_name + "top.vtp" + "\n"
#     if "Face file path: ./epi.vtp" in svRead[item]:
#         svRead[item] = "      Face file path: " + fd_name + "epi.vtp" + "\n"
#     if "Face file path: ./endo.vtp" in svRead[item]:
#         svRead[item] = "      Face file path: " + fd_name + "endo.vtp" + "\n"
#     if "Save results in folder:" in svRead[item]:
#         svRead[item] = "Save results in folder: " + fd_name + "lps_thickness" + "\n"

# with open(out_name, 'w') as svFileNew:
#     svFileNew.writelines(svRead)

os.system("mpiexec -np 4 " + svFSI_exec_path + " solver_laplace.inp")

# calculate the polar coordinate of each point
lps_rsult = pv.read('lps_thickness/result_020.vtu')
t = lps_rsult.point_data['PHI_THK']
u = np.array([])
v = np.array([])
t_cell = np.array([])
rss = np.array([])
rll = np.array([])
dxdu = np.zeros((NoC,3))
dxdv = np.zeros((NoC,3))
temp = np.zeros(3)
f = np.zeros((NoC,3))
n = np.zeros((NoC,3))
s = np.zeros((NoC,3))
alpha_al = np.array([])
for i in range(NoC):
    x = 0
    y = 0
    z = 0
    tt = 0
    for j in range(eNoN):
        x = x + coord[conn[i, j], 0]
        y = y + coord[conn[i, j], 1]
        z = z + coord[conn[i, j], 2]
        tt = tt + t[conn[i, j]]
    x = x / eNoN
    y = y / eNoN
    z = z / eNoN
    tt = tt / eNoN
    rl = (rli + (rlo - rli) * tt)
    rs = (rsi + (rso - rsi) * tt)
    at = np.sqrt(y*y + z*z) / rs
    bt = x / rl
    ut = np.arctan2(at, bt)
    vt = 0.0 if ut < 1e-7 else np.pi - np.arctan2(z, -y)

    u = np.append(u, ut)
    v = np.append(v, vt)

    t_cell = np.append(t_cell, tt)

    # fiber directions
    rs = rsi + (rso - rsi) * tt
    rl = rli + (rlo - rli) * tt
    temp[1] = rs * np.cos(u[i]) * np.cos(v[i])
    temp[2] = rs * np.cos(u[i]) * np.sin(v[i])
    temp[0] = -rl * np.sin(u[i])
    dxdu[i, :] = temp / np.linalg.norm(temp)

    temp[1] = -rs * np.sin(u[i]) * np.sin(v[i])
    temp[2] = rs * np.sin(u[i]) * np.cos(v[i])
    temp[0] = 0.0
    dxdv[i, :] = temp / np.linalg.norm(temp)

    alpha = np.pi * (-1.0 / 3 + 2.0 / 3 * tt)
    f[i, :] = dxdu[i, :] * np.sin(alpha) + dxdv[i, :] * np.cos(alpha)

    # beta   = alpha - np.pi/2.0
    # n[i,:] = dxdu[i,:]*np.sin(beta) + dxdv[i,:]*np.cos(beta)
    alpha_al = np.append(alpha_al, alpha)

    n[i, :] = np.cross(dxdu[i, :], dxdv[i, :])

    s[i, :] = np.cross(f[i, :], n[i, :])

#########################################################
## write vtu files

#output.GetCellData().RemoveArray("GlobalElementID")
output.GetCellData().RemoveArray("ModelRegionID")
#output.GetPointData().RemoveArray("GlobalNodeID")

aff = vtknp.numpy_to_vtk(t_cell)
aff.SetNumberOfTuples(NoC)

aff.SetName("Thickness")

fname1 = fd_name + "fibersLongCells.vtu"
bff = vtk.vtkDoubleArray()
bff.SetNumberOfComponents(3)
bff.Allocate(NoC)
bff.SetNumberOfTuples(NoC)

bff.SetName("FIB_DIR")

for i in range(NoC):
    bff.SetTuple3(i, f[i,0], f[i,1], f[i,2])

output.GetCellData().AddArray(bff)
output.GetCellData().AddArray(aff)
mshwrite = vtk.vtkXMLUnstructuredGridWriter()
mshwrite.SetInputData(output)
mshwrite.SetFileName(fname1)
mshwrite.Write()

output.GetCellData().RemoveArray("FIB_DIR")
fname1 = fd_name + "fibersSheetCells.vtu"
bff = vtk.vtkDoubleArray()
bff.SetNumberOfComponents(3)
bff.Allocate(NoC)
bff.SetNumberOfTuples(NoC)

bff.SetName("FIB_DIR")

for i in range(NoC):
    bff.SetTuple3(i, s[i,0], s[i,1], s[i,2])

output.GetCellData().AddArray(bff)
mshwrite = vtk.vtkXMLUnstructuredGridWriter()
mshwrite.SetInputData(output)
mshwrite.SetFileName(fname1)
mshwrite.Write()

output.GetCellData().RemoveArray("FIB_DIR")
fname1 = fd_name + "phiCell.vtu"
phi = vtknp.numpy_to_vtk(t_cell,array_type=vtk.VTK_DOUBLE)
phi.SetName("Phi")
output.GetCellData().AddArray(phi)

mshwrite = vtk.vtkXMLUnstructuredGridWriter()
mshwrite.SetInputData(output)
mshwrite.SetFileName(fname1)
mshwrite.Write()